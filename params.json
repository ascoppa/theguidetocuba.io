{"name":"Cuba-guide","tagline":"No longer maintained.","body":"**  NOTE: This is not maintained. I moved all the content and keep updating it in LeanPub. More details, hopefully in April.**\r\n\r\nA catchy introduction title here\r\n--------------------------------\r\n\r\nTo begin, let's take a moment to answer \"what is Cuba?\".\r\n\r\nCuba is a web application micro-framework written in Ruby by [Michel Martens][soveran].\r\nIt rides on Rack so we have the benefits of middlewares and the variety of web servers,\r\nwhich support Rack (WEBrick, Thin, Puma, etc.) for free. Cuba is small (~170 lines of\r\ncode) what makes it faster compared with other frameworks.\r\n\r\nUnlike other frameworks, Cuba is not opinionated software, it doesn't make\r\nassumptions about what is the \"best\" way to do things. It's minimalist by\r\ndesign which gives us the freedom to choose the proper tools for the job.\r\n\r\nPrerequisites\r\n-------------\r\n\r\nThis guide is designed for beginners who want to get started with a Cuba application\r\nfrom scratch. However, you need to have some prerequisites installed:\r\n\r\n* Ruby 2.0 or newer. You can get the latest Ruby distributions from the\r\n  [Ruby download page](https://www.ruby-lang.org/en/downloads/).\r\n\r\n* The [Redis][redis] database. If you haven't yet installed Redis, you can follow\r\n  the instructions in the [Redis download page](http://redis.io/download).\r\n\r\nBy following along with this guide, we'll build a Twitter clone from scratch.\r\nIt's recommended to create a directory for the application code. Any reference\r\nto create a new file or execute a specific command, will be made from that\r\ndirectory. You can get the complete code [here][code].\r\n\r\nWarming up\r\n----------\r\n\r\nYou need to know that Cuba doesn't ship with all the tools that we need to\r\naccomplish our goal, eg. a template rendering engine or a database client.\r\nBut this is where other libraries, that share the same minimalist philosophy,\r\ncome to the rescue.\r\n\r\nTo make it easier, let's install all the dependencies before we get started.\r\nIn order to achieve this, we will use the [dep][dep] gem. To install it,\r\nopen up a command line prompt and use the `gem install` command.\r\n\r\n```\r\n$ gem install dep\r\n```\r\n\r\nDep is a tool to track dependencies in a project. That is very helpful if\r\nyou want to know which gems a project is using or if you want to share the\r\nproject with someone else and don't go insane installing all the dependencies\r\nyour project needs.\r\n\r\nOpen up your favorite text editor and save the following content as `.gems`.\r\nThis file serves as a manifest of the dependencies of our project.\r\n\r\n```\r\ncuba -v 3.1.0\r\ncuba-contrib -v 3.1.0\r\nohm -v 2.0.0.rc1\r\n```\r\n\r\nFinally, execute the following command to install all the listed gems.\r\n\r\n```\r\n$ dep install\r\n```\r\n\r\nYou will find the purpose behind each dependency over the course of this guide.\r\nIf you want to know more about the features provided by [dep][dep], please visit\r\nthe project [homepage](http://twpil.github.com/dep).\r\n\r\nCreating the Cuba app\r\n---------------------\r\n\r\nNow that Cuba is correctly installed, it's time to create the classic hello world\r\napplication. Creating a Cuba application is pretty easy. Open your preferred text\r\neditor and enter the following code:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\n\r\nCuba.define do\r\n  on root do\r\n    res.write \"Hello world!\"\r\n  end\r\nend\r\n```\r\n\r\nSave this file as app.rb. As you can see, the code is very readable, but\r\ndon't worry, we will talk about the details later on.\r\n\r\nYou actually have a functional \"Hello World\" Cuba application already. To see it\r\nworking, you will need to start the web server. Before that, create a file called\r\n`config.ru` with the contents shown in below:\r\n\r\n```ruby\r\nrequire \"./app\"\r\n\r\nrun Cuba\r\n```\r\n\r\nNow, we can start the web server. Rack comes with a tool called `rackup` to achieve\r\nthis task, but we will use [shotgun][shotgun] in this guide. You can install `shotgun`\r\nwith the `gem` command:\r\n\r\n```\r\n$ gem install shotgun\r\n```\r\n\r\nUnlike `rackup`, Shotgun will reload the application every time a new request comes\r\nin from the web browser. That's great for development because we don't need to restart\r\nthe server every time that we make changes to the application. To shoot the server,\r\nuse the `shotgun` command.\r\n\r\n```\r\n$ shotgun\r\n== Shotgun/WEBrick on http://127.0.0.1:9393/\r\n[2014-02-20 13:20:26] INFO  WEBrick 1.3.1\r\n[2014-02-20 13:20:26] INFO  ruby 2.1.0 (2013-12-25) [x86_64-darwin13.0]\r\n[2014-02-20 13:20:26] INFO  WEBrick::HTTPServer#start: pid=24037 port=9393\r\n```\r\n\r\nThis fired up WEBrick, a webserver built into Ruby by default. To see the app\r\nin action, open a browser window and navigate to <http://localhost:9393/>. It\r\nshould show the \"Hello world!\" message.\r\n\r\n**NOTE:** You will need to restart the server if you install or update a gem.\r\n\r\n### Breaking Down the Syntax\r\n\r\nNow that we know how to build a minimal Cuba application, let's take a deeper\r\nlook at the syntax:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\n\r\nCuba.define do\r\n  on root do\r\n    res.write \"Hello world!\"\r\n  end\r\nend\r\n```\r\nn this short example, we can identify three methods that appear in all Cuba\r\napplications: `define`, `on` and `res`.\r\n\r\nAs the name suggests, `Cuba#define` allows us to define a Cuba app through a block,\r\nthat gives us some objects like `req`, `res` and `env`, and a couple of helper\r\nmethods to manage the flow of our application, like the handy `on`.\r\n\r\n`Cuba#on` is responsible for managing the control flow of our application and is the\r\ncornerstone of defining routes. If you're used to the `if/else/case` statements, on\r\nwill be very easy to get. **How it works?** It executes the given block only if all\r\nof the given arguments evaluate to `true`.\r\n\r\nGoing back to the above example, we can see that `on` expects `root` to be `true` in\r\norder to write the \"Hello, Cuba!\" message. `root` returns `true` only if the accessed\r\npath is the root of the application (`\"/\"` or `\"\"`). That's why every time we enter\r\nto <http://localhost:9393/>, we see the welcome message. It's possible to create\r\nmultiple `on` blocks or create nested ones, but we will discuss these features later.\r\n\r\nFinally, there is the `res` object that not only represents the response object,\r\nbut also provides us with methods for setting the response status, the headers and\r\nthe body. This is a killer feature of Cuba, because we can explicitly handle the\r\nserver response.\r\n\r\nBack to our example, we use the `write` method to set the response body with the\r\ngreeting message. By default, Cuba sets the response status code to `200`, but if\r\nno routes match the request, it issues a `404`.\r\n\r\nSetting the home page\r\n---------------------\r\n\r\nNow that we have a functional Cuba app, we need to display a page with a register\r\nform for users not logged in to the app.\r\n\r\n### The first template\r\n\r\nSuppose you have to write a big chunk of HTML code or change a lot of pages at once,\r\nit will be hard to do it if we define them inside the routes or using only strings.\r\n\r\n```ruby\r\nrequire \"cuba\"\r\n\r\nCuba.define do\r\n  on root do\r\n    res.write \"<form> ... </form>\"\r\n  end\r\nend\r\n```\r\n\r\nTemplates promote reusability and maintainability.\r\n\r\nCuba doesn't ship with a template engine. This guide uses [mote][mote], a very\r\nsimple and fast template engine. We will use the [cuba-contrib][cuba-contrib] gem\r\nto facilitate the integration between Mote and Cuba.\r\n\r\nOpen the `app.rb` file and add make these changes:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\nrequire \"cuba/mote\"\r\n\r\nCuba.plugin(Cuba::Mote)\r\n\r\nCuba.define do\r\n  ...\r\nend\r\n```\r\n\r\nCuba provides a way to extend its functionality through the `plugin` method.\r\nLater in the guide, we will demonstrate how to author your own plugins.\r\n\r\n**NOTE:** If you want to use another template engine, read this\r\n[\"Cuba and Tilt\"](TODO).\r\n\r\nNow that Mote is configured, let's create the layout. This is the HTML template\r\nthat wraps the main content of every template. Create a directory called `views`\r\nand save the following content in a file called `layout.mote`.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Twitter Clone</title>\r\n  </head>\r\n  <body>\r\n    {{ params[:content] }}\r\n  </body>\r\n</html>\r\n```\r\n\r\nThere is one thing that you should notice `{{ params[:content] }}`. Mote prints in the\r\ntemplate whatever is between `{{` and `}}`. In this case, `{{ params[:content] }}`\r\nis responsible for combining the content of each sub-page with the layout.\r\n\r\nNow that we have a layout, let's create another template called `home.mote` with the\r\ncontent below. Remember that all the templates need to be saved in the `views`\r\ndirectory.\r\n\r\n```html\r\n<h2>New to Twitter?</h2>\r\n\r\n<form action=\"/signup\" method=\"POST\">\r\n  <input type=\"email\" name=\"signup[email]\" placeholder=\"Email\">\r\n  <input type=\"text\" name=\"signup[username]\" placeholder=\"Username\">\r\n  <input type=\"text\" name=\"signup[name]\" placeholder=\"Name\">\r\n  <input type=\"submit\" value=\"Create Account\">\r\n</form>\r\n```\r\n\r\nThe last step is to change the code inside the `root` route:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\nrequire \"cuba/mote\"\r\n\r\nCuba.plugin(Cuba::Mote)\r\n\r\nCuba.define do\r\n  on root do\r\n    render(\"home\")\r\n  end\r\nend\r\n```\r\n\r\nThe `render` method, provided by `Cuba::Mote`, will print the desired template\r\ninto the browser. Refresh your browser window. It should show the signup form.\r\n\r\n### Passing Data into Templates\r\n\r\nLet's add the ability to change the title of the page. First, we need to change\r\nthe `layout.mote` file and include the title head.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Twitter Clone | {{ params[:title] }}</title>\r\n  </head>\r\n  <body>\r\n    {{ params[:content] }}\r\n  </body>\r\n</html>\r\n```\r\n\r\nNotice the `{{ params[:title] }}` statement. You can pass a hash as a second\r\nparameter for the `render` method. This allows us to show information generated in\r\nthe back-end of the app to the front-end pages.\r\n\r\nChange the `root` route on the `app.rb` file to set a title for the home page.\r\n\r\n```ruby\r\n...\r\n\r\nCuba.define do\r\n  on root do\r\n    render(\"home\", title: \"Welcome to Twitter\")\r\n  end\r\nend\r\n```\r\n\r\nRefresh your browser window. It should show the new title.\r\n\r\nThis app wouldn't be a Twitter clone if it didn't have an authentication system.\r\nBut before thinking about users and passwords, we'll need to set a database to\r\nstore the users information. That's when Redis and Ohm come into play.\r\n\r\nSetting up Redis and Ohm\r\n------------------------\r\n\r\nIt'll be more difficult to create our own connection client or craft by hand the keys\r\nto save the objects in Redis. That's why we'll use [Ohm][ohm], an Object-hash mapping\r\nlibrary for storing objects in Redis.\r\n\r\nSetting up Ohm inside the app, is as easy as using a `require` statement:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\nrequire \"cuba/mote\"\r\nrequire \"ohm\"\r\n\r\nCuba.plugin(Cuba::Mote)\r\n\r\nCuba.define do\r\n  on root do\r\n    render(\"home\")\r\n  end\r\nend\r\n```\r\n\r\nBy default, Ohm connects to `redis://127.0.0.1:6379`. If you want to change the\r\ndefault, you can read the [\"Connecting to a Redis Database\"](https://github.com/soveran/ohm#connecting-to-a-redis-database)\r\nsection in the Ohm README.\r\n\r\nTo check if Ohm is set in our app, open `irb` (Interactive Ruby Shell) requiring\r\nthe app and execute the following command:\r\n\r\n```\r\n$ irb -r ./app.rb\r\n>> Ohm.redis.call(\"ECHO\", \"Hello, Redis!\")\r\n=> \"Hello, Redis!\"\r\n```\r\n\r\nCreating the User model\r\n-----------------------\r\n\r\nNow that we have Redis and Ohm working, it's time to set the user model for the\r\nauthentication system. Ohm uses the `Ohm::Model` class to map objects to Redis\r\ndatastore.\r\n\r\nCreate a new directory called `models` and save the following content in a\r\nfile called `user.rb`:\r\n\r\n```ruby\r\nclass User < Ohm::Model\r\nend\r\n```\r\n\r\nThat's it! We don't need migrations or schema definitions to start using it.\r\nFor the moment, we need to save the username, email and name of the users. We can\r\nuse the `attribute` class method to define the attributes to be saved. The values\r\nwill be stored as strings.\r\n\r\n```ruby\r\nclass User < Ohm::Model\r\n  attribute :username\r\n  attribute :email\r\n  attribute :name\r\nend\r\n```\r\n\r\nAdd this line to the `app.rb` file to require all the models inside the `/models`\r\ndirectory.\r\n\r\n```ruby\r\nrequire \"cuba\"\r\nrequire \"cuba/mote\"\r\nrequire \"ohm\"\r\n\r\nCuba.plugin(Cuba::Mote)\r\n\r\nDir[\"./models/**/*.rb\"].each { |f| require(f) }\r\n\r\n...\r\n```\r\n\r\nLet's play around with Ohm!\r\n\r\n```\r\n$ irb -r ./app.rb\r\n>> user = User.create(username: \"john\", name: \"John Doe\", email: \"john@doe.com\")\r\n>> user.id\r\n# => 2\r\n>> user.attributes\r\n# => {:username=>\"john\", :name=>\"John Doe\", :email=>\"john@doe.com\"}\r\n>> user == User[2]\r\n# => true\r\n```\r\n\r\nUser signup form\r\n----------------\r\n\r\nWe already have a signup form in the homepage, but if you click the \"Create Account\"\r\nbutton nothing happens. Before touching the code, let's think about what we need.\r\n\r\n1. We need to match the \"/signup\" path.\r\n2. Also, it's important to check that HTTP POST method is used.\r\n3. Finally, check if the \"signup\" request parameter is present.\r\n\r\nGuess what? Cuba provides all the features to accomplish those tasks in an elegant\r\nway. Let's add the piece of code that is missing:\r\n\r\n```ruby\r\nrequire \"cuba\"\r\nrequire \"cuba/mote\"\r\nrequire \"ohm\"\r\n\r\nCuba.plugin(Cuba::Mote)\r\n\r\nDir[\"./models/**/*.rb\"].each { |f| require(f) }\r\n\r\nCuba.define do\r\n  on root do\r\n    render(\"home\", title: \"Welcome to Twitter\")\r\n  end\r\n\r\n  on \"signup\" do\r\n    on post, param(\"signup\") do |signup|\r\n      user = User.create(signup)\r\n\r\n      res.write(\"You created a new user: #{user.id}\")\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nAdding some validation\r\n----------------------\r\n\r\n[code]: https://github.com/frodsan/cuba-guide/tree/master/twitter-clone\r\n[cuba]: https://github.com/soveran/cuba\r\n[cuba-contrib]: https://github.com/cyx/cuba-contrib\r\n[dep]: https://github.com/cyx/dep\r\n[mote]: https://github.com/soveran/mote\r\n[ohm]: https://github.com/soveran/ohm\r\n[redis]: http://redis.io/\r\n[shotgun]: https://github.com/rtomayko/shotgun\r\n[soveran]: https://github.com/soveran/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}